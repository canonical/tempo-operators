# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.
name: tempo-coordinator-k8s
type: charm

assumes:
  - k8s-api
  - juju >= 3.6.0

description: |
  Tempo is a distributed tracing backend by Grafana, supporting Jaeger,
  Zipkin, and OpenTelemetry protocols.

summary: |
  Tempo is a distributed tracing backend by Grafana.

containers:
  nginx:
    resource: nginx-image
  nginx-prometheus-exporter:
    resource: nginx-prometheus-exporter-image

resources:
  nginx-image:
    type: oci-image
    description: OCI image for nginx
    upstream-source: ubuntu/nginx:1.24-24.04_beta
  nginx-prometheus-exporter-image:
    type: oci-image
    description: OCI image for nginx-prometheus-exporter
    upstream-source: nginx/nginx-prometheus-exporter:1.1.0

links:
  documentation: https://discourse.charmhub.io/t/tempo-coordinator-k8s-docs-index/15419
  website: https://charmhub.io/tempo-coordinator-k8s
  source: https://github.com/canonical/tempo-coordinator-k8s-operator
  issues: https://github.com/canonical/tempo-coordinator-k8s-operator/issues

provides:
  tempo-cluster:
    interface: tempo_cluster
    description: |
      Connect any number of tempo-worker-k8s charms to cluster the Tempo components off to different nodes.
      The charm needs this integration to work.
  grafana-dashboard:
    optional: true
    interface: grafana_dashboard
    description: |
      Forwards the built-in grafana dashboard(s) for monitoring Tempo.
  grafana-source:
    optional: true
    interface: grafana_datasource
    description: |
      Configures Grafana to be able to use this Tempo instance as a datasource.
  metrics-endpoint:
    optional: true
    interface: prometheus_scrape
    description: |
      Exposes the Prometheus metrics endpoint providing telemetry about the
      Tempo instance.
  tracing:
    optional: true
    interface: tracing
    description: |
      Integration to offer other charms the possibility to send traces to Tempo.
  probes:
    optional: true
    interface: blackbox_exporter_probes
    description: |
      Integration to expose Blackbox Exporter probes for Tempo's reachability.
  tempo-api:
    optional: true
    interface: tempo_api
    description: |
      Integration to offer other charms the possibility to interact with Tempo's API.

requires:
  s3:
    interface: s3
    limit: 1
    description: |
      Obtains access to the s3 bucket for data storage. The charm needs this integration to work.
  self-charm-tracing:
    optional: true
    interface: tracing
    description: |
      Integration to enable Tempo to send its own charm traces to another Tempo instance.
    limit: 1
  self-workload-tracing:
    optional: true
    interface: tracing
    description: |
      Integration to enable Tempo to send its own workload traces to another Tempo instance.
    limit: 1
  logging:
    optional: true
    interface: loki_push_api
    description: |
      Integration with Loki to push Tempo logs to the observability stack.
  ingress:
    optional: true
    interface: traefik_route
    description: |
      Ingress integration for Tempo server and Tempo receiver endpoints,
      so that cross-model workloads can send their traces to Tempo through the ingress.
      Uses `traefik_route` to open ports on Traefik host for tracing ingesters.
  certificates:
    optional: true
    interface: tls-certificates
    limit: 1
    description: |
      Certificate and key files for securing Tempo internal and external
      communications with TLS.
  send-remote-write:
    optional: true
    interface: prometheus_remote_write
    description: |
      Prometheus-like remote write endpoints to push traces' metrics generated by the `metrics-generator` component.
  receive-datasource:
    optional: true
    interface: grafana_datasource_exchange
    description: |
      Integration to share with other COS components this charm's datasources, and receive theirs.
  catalogue:
    optional: true
    interface: catalogue
    description: |
      Integration to help users discover Tempo's UI, providing visibility into Tempo's cluster members and their health status.

storage:
  data:
    type: filesystem
    location: /tempo-data

actions:
  list-receivers:
    description: |
      Returns a list of all enabled receiver endpoints.

peers:
  peers:
    interface: tempo_peers
    description: |
      peer relation for internal coordination

platforms:
  ubuntu@24.04:amd64:

parts:
  charm:
    source: .
    plugin: uv
    build-packages: [git] # handy for git+ dependencies during development
    build-snaps: [astral-uv]
    override-build: |
      craftctl default
      git describe --always > $CRAFT_PART_INSTALL/version

config:
  options:
    retention-period:
      description: |
        Maximum trace retention period, in hours. This will be used to configure the compactor to clean up trace data after this time.
        Defaults to 720 hours, which is equivalent to 30 days. Per-stream retention limits are currently not supported.
      type: int
      default: 720
    always_enable_zipkin:
      description: |
        Force-enable the receiver for the 'zipkin' protocol in Tempo, even if there is no integration currently
        requesting it.
      type: boolean
      default: false
    always_enable_otlp_grpc:
      description: |
        Force-enable the receiver for the 'otlp_grpc' protocol in Tempo, even if there is no integration currently
        requesting it.
      type: boolean
      default: false
    always_enable_otlp_http:
      description: |
        Force-enable the receiver for the 'otlp_http' protocol in Tempo, even if there is no integration currently
        requesting it.
      type: boolean
      default: false
    always_enable_jaeger_thrift_http:
      description: |
        Force-enable the receiver for the 'jaeger_thrift_http' protocol in Tempo, even if there is no integration
        currently requesting it.
      type: boolean
      default: false
    always_enable_jaeger_grpc:
      description: |
        Force-enable the receiver for the 'jaeger_grpc' protocol in Tempo, even if there is no integration currently
        requesting it.
      type: boolean
      default: false
    cpu_limit:
      description: |
        K8s cpu resource limit, e.g. "1" or "500m". Default is unset (no limit). This value is used
        for the "limits" portion of the resource requirements.
        See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
      type: string
    memory_limit:
      description: |
        K8s memory resource limit, e.g. "1Gi". Default is unset (no limit). This value is used
        for the "limits" portion of the resource requirements.
        See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
      type: string
